apiVersion: apps.kubeblocks.io/v1alpha1
kind: ComponentDefinition
metadata:
  name: {{ include "mysql.componentDefName" . }}
  labels:
      {{- include "mysql.labels" . | nindent 4 }}
spec:
  serviceVersion: 8.0.33
  provider: kubeblocks
  description: mysql component definition for Kubernetes
  serviceKind: mysql

  serviceRefDeclarations:
    - name: orchestrator
      serviceRefDeclarationSpecs:
        - serviceKind: orchestrator
          serviceVersion: "^*"

  updateStrategy: BestEffortParallel

  configs:
    - name: mysql-config
      volumeName: mysql-config
      templateRef: my-mysql-config
      constraintRef: my-mysql-config-constraints
      namespace: {{ .Release.Namespace }}
      reRenderResourceTypes:
        - vscale

  scripts:
    - name: mysql-scripts
      templateRef: my-mysql-scripts
      namespace: {{ .Release.Namespace }}
      volumeName: scripts
      defaultMode: 0555

  services:
    - name: mysql
      serviceName: mysql
      podService: true
      spec:
        ports:
          - name: mysql
            targetPort: mysql
            port: 3306

  roles:
    - name: primary
      serviceable: true
      writable: true
    - name: secondary
      serviceable: true
      writable: false

  lifecycleActions:
    postProvision:
      customHandler:
        exec:
          image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:8.0.33
          command:
            - bash
            - -c
            - "/scripts/mysql-orchestrator-register.sh"
        preCondition: RuntimeReady
    preTerminate:
      customHandler:
        exec:
          image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:8.0.33
          command:
            - bash
            - -c
            - curl http://${ORC_ENDPOINTS%%:*}:${ORC_PORTS}/api/forget-cluster/${KB_CLUSTER_NAME}
    roleProbe:
      builtinHandler: custom
      exec:
        command:
          - /bin/bash
          - -c
          - |
            topology_info=$(/kubeblocks/orchestrator-client -c topology -i $KB_CLUSTER_NAME) || true
            if [[ $topology_info == "" ]]; then
              echo -n "secondary"
              exit 0
            fi

            first_line=$(echo "$topology_info" | head -n 1)
            cleaned_line=$(echo "$first_line" | tr -d '[]')
            old_ifs="$IFS"
            IFS=',' read -ra status_array <<< "$cleaned_line"
            IFS="$old_ifs"
            status="${status_array[1]}"
            if  [ "$status" != "ok" ]; then
              exit 0
            fi

            address_port=$(echo "$first_line" | awk '{print $1}')
            master_from_orc="${address_port%:*}"
            last_digit=${KB_POD_NAME##*-}
            self_service_name=$(echo "${KB_CLUSTER_COMP_NAME}_mysql_${last_digit}" | tr '_' '-' | tr '[:upper:]' '[:lower:]' )
            if [ "$master_from_orc" == "${self_service_name}" ]; then
              echo -n "primary"
            else
              echo -n "secondary"
            fi
    memberLeave:
      customHandler:
        exec:
          command:
            - /bin/bash
            - -c
            - |
              set +e
              master_from_orc=$(/kubeblocks/orchestrator-client -c which-cluster-master -i $KB_CLUSTER_NAME)
              last_digit=${KB_LEAVE_MEMBER_POD_NAME##*-}
              self_service_name=$(echo "${KB_CLUSTER_COMP_NAME}_mysql_${last_digit}" | tr '_' '-' | tr '[:upper:]' '[:lower:]' )
              if [ "${self_service_name%%:*}" == "${master_from_orc%%:*}" ]; then
                /kubeblocks/orchestrator-client -c force-master-failover -i $KB_CLUSTER_NAME
                local timeout=30
                local start_time=$(date +%s)
                local current_time
                while true; do
                  current_time=$(date +%s)
                  if [ $((current_time - start_time)) -gt $timeout ]; then
                    break
                  fi
                  master_from_orc=$(/kubeblocks/orchestrator-client -c which-cluster-master -i $KB_CLUSTER_NAME)
                  if [ "${self_service_name%%:*}" != "${master_from_orc%%:*}" ]; then
                    break
                  fi
                  sleep 1
                done
              fi
              /kubeblocks/orchestrator-client -c reset-replica -i ${self_service_name}
              /kubeblocks/orchestrator-client -c forget -i ${self_service_name}
              res=$(/kubeblocks/orchestrator-client -c which-cluster-alias -i ${self_service_name})
              local start_time=$(date +%s)
              while [ "$res" == "" ]; do
                current_time=$(date +%s)
                if [ $((current_time - start_time)) -gt $timeout ]; then
                  break
                fi
                sleep 1
                res=$(/kubeblocks/orchestrator-client -c instance -i ${self_service_name})
              done
              /kubeblocks/orchestrator-client -c forget -i ${self_service_name}

  systemAccounts:
    - name: root
      initAccount: true
      passwordGenerationPolicy:
        length: 10
        numDigits: 5
        numSymbols: 0
        letterCase: MixedCases

  vars:
    - name: ORC_TOPOLOGY_USER
      value: "orchestrator"
    - name: ORC_TOPOLOGY_PASSWORD
      value: "orchestrator"
    - name: MYSQL_ROOT_USER
      valueFrom:
        credentialVarRef:
          name: root
          username: Required
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        credentialVarRef:
          name: root
          password: Required
    - name: DATA_MOUNT
      value: {{.Values.dataMountPath}}
    - name: ORC_ENDPOINTS
      valueFrom:
        serviceRefVarRef:
          name: orchestrator
          endpoint: Required
    - name: ORC_PORTS
      valueFrom:
        serviceRefVarRef:
          name: orchestrator
          port: Required
  volumes:
    - name: data
      needSnapshot: true

  runtime:
    initContainers:
      - name: init-jq
        command:
          - /bin/sh
          - -c
          - |
            cp -r /usr/bin/jq /kubeblocks/jq
            cp -r /scripts/orchestrator-client /kubeblocks/orchestrator-client
            cp -r /usr/local/bin/curl /kubeblocks/curl
        image: {{ .Values.image.registry | default "docker.io" }}/apecloud/orc-tools:1.0.2
        imagePullPolicy: {{ default .Values.image.pullPolicy "IfNotPresent" }}
        volumeMounts:
          - mountPath: /kubeblocks
            name: kubeblocks
    containers:
      - name: mysql
        image: mysql:8.0.33
        lifecycle:
          postStart:
            exec:
              command:
                - bash
                - -c
                - /scripts/init-mysql-instance.sh
        command:
          - bash
          - -c
          - |
            SERVICE_ID=$((${KB_POD_NAME##*-} + 1))
            REPORT_HOST=${KB_CLUSTER_COMP_NAME}-mysql-${KB_POD_NAME##*-}
            docker-entrypoint.sh mysqld --server-id $SERVICE_ID --report-host ${REPORT_HOST}

        ports:
          - name: mysql
            containerPort: 3306
        volumeMounts:
          - name: data
            mountPath: /var/lib/mysql
          - name: mysql-config
            mountPath: /etc/mysql/conf.d
          - name: scripts
            mountPath: /scripts
          - mountPath: /kubeblocks
            name: kubeblocks
        env:
          - name: PATH
            value: /kubeblocks/xtrabackup/bin:/kubeblocks/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
              - bash
              - -c
              - mysql -h 127.0.0.1 -p${MYSQL_ROOT_PASSWORD} -e "SELECT 1"
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1